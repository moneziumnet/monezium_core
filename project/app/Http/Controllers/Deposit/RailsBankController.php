<?php

namespace App\Http\Controllers\Deposit;

use Illuminate\Support\Str;
use App\Classes\GeniusMailer;
use App\Models\BankGateway;
use App\Models\BankAccount;
use App\Models\Currency;
use App\Models\Charge;
use App\Models\Transaction;
use App\Models\PlanDetail;
use App\Models\DepositBank;
use App\Models\Admin;
use App\Models\Generalsetting;
use App\Models\SubInsBank;
use App\Models\BankPoolAccount;
use App\Models\User;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use GuzzleHttp\Client;
use Illuminate\Support\Facades\Validator;
use Auth;

class RailsBankController extends Controller
{
    public function store(Request $request){
        $currency = Currency::whereId($request->currency)->first();
        if ($currency->code != 'EUR'){
            return redirect()->back()->with(array('warning' => 'Sorry, Currently Railsbank API only supports for EUR because this API is not product version.'));
        }

        $client = New Client();
        $user = User::findOrFail($request->user);
        $bankgateway = BankGateway::where('subbank_id', $request->subbank)->first();
        $bankaccount = BankAccount::where('user_id', $request->user)->where('subbank_id', $request->subbank)->where('currency_id', $request->currency)->first();
        if ($bankaccount){
            return redirect()->back()->with(array('warning' => 'This bank account already exists.'));
        }
        try {
            $response = $client->request('POST', 'https://play.railsbank.com/v1/customer/endusers', [
                'body' => '{
                    "person": {
                      "name": "'.$user->name.'",
                      "email": "'.$user->email.'",
                      "address": { "address_iso_country": "US" }
                    }
                }',
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $enduser = json_decode($response->getBody())->enduser_id;
        } catch (\Throwable $ex) {
            //throw $th;
            return redirect()->back()->with(array('warning' => 'Some Value is incorrect'));
        }
        if ($enduser == null) {
            return redirect()->back()->with(array('warning' => 'Sorry, You can\'t create New Bank Account succesfully because RailsBank\'s enduser is not generated by RailsBank API. Please create again.'));
        }


        try {
            $response = $client->request('POST', 'https://play.railsbank.com/v1/customer/ledgers', [
                'body' => '{
                    "holder_id": "'.$enduser.'",
                    "partner_product": "ExampleBank-'.$currency->code.'-1",
                    "asset_class": "currency",
                    "asset_type": "'.strtolower($currency->code).'",
                    "ledger-type": "ledger-type-single-user",
                    "ledger-who-owns-assets": "ledger-assets-owned-by-me",
                    "ledger-primary-use-types": ["ledger-primary-use-types-payments"],
                    "ledger-t-and-cs-country-of-jurisdiction": "US"
                  }',
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $ledger = json_decode($response->getBody())->ledger_id;
        } catch (\Throwable $ex) {
            return redirect()->back()->with(array('warning' => 'Some Value is incorrect'));
        }
        if ($ledger == null) {
            return redirect()->back()->with(array('warning' => 'Sorry, You can\'t create New Bank Account succesfully because Railsbank\'s ledger is not generated by RailsBank API. Please create again.'));
        }

        try {
            $response = $client->request('GET', 'https://play.railsbank.com/v1/customer/ledgers/'.$ledger.'/wait', [
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $bic_swift = json_decode($response->getBody())->bic_swift;
            $iban = json_decode($response->getBody())->iban;
        } catch (\Throwable $ex) {
            //throw $th;
            return redirect()->back()->with(array('warning' => 'Some Value is incorrect'));

        }
        if ($iban == null || $bic_swift == null) {
            return redirect()->back()->with(array('warning' => 'Sorry, You can not create New Bank Account succesfully because RailsBank\'s iban or swift is not generated by OPENPAY API. Please try again.'));
        }

        $data = New BankAccount();
        $data->user_id = $request->user;
        $data->subbank_id = $request->subbank;
        $data->iban = $iban;
        $data->swift = $bic_swift;
        $data->currency_id = $request->currency;
        $data->save();

        $chargefee = Charge::where('slug', 'account-open')->where('plan_id', $user->bank_plan_id)->where('user_id', $user->id)->first();
        if(!$chargefee) {
            $chargefee = Charge::where('slug', 'account-open')->where('plan_id', $user->bank_plan_id)->where('user_id', 0)->first();
        }

        $trans = new Transaction();
        $trans->trnx = str_rand();
        $trans->user_id     = $user->id;
        $trans->user_type   = 1;
        $trans->currency_id =  defaultCurr();
        $trans->amount      = $chargefee->data->fixed_charge;
        $trans_wallet       = get_wallet($user->id, defaultCurr(), 1);
        $trans->wallet_id   = isset($trans_wallet) ? $trans_wallet->id : null;
        $trans->charge      = 0;
        $trans->type        = '-';
        $trans->remark      = 'bank_account_create';
        $trans->details     = trans('Bank Account Create');
        $trans->data        = '{"sender":"'.($user->company_name ?? $user->name).'", "receiver":"System Account"}';
        $trans->save();

        user_wallet_decrement($user->id, defaultCurr(), $chargefee->data->fixed_charge, 1);
        user_wallet_increment(0, defaultCurr(), $chargefee->data->fixed_charge, 9);

        return redirect()->back()->with(array('message' => 'Bank Account has been created successfully'));


    }
    public function transfer(Request $request) {
        $user = auth()->user();
        if($user->payment_fa_yn == 'Y') {
            if ($user->two_fa_code != $request->otp_code) {
                return redirect()->back()->with('unsuccess','Verification code is not matched.');
            }
        }
        $other_bank_limit =Generalsetting::first()->other_bank_limit;
        if ($request->amount >= $other_bank_limit) {
            $rules = [
                'document' => 'required|mimes:xls,xlsx,pdf,jpg,png'
            ];
        }
        else {
            $rules = [
                'document' => 'mimes:xls,xlsx,pdf,jpg,png'
            ];
        }


        $validator = Validator::make($request->all(), $rules);

        if ($validator->fails()) {
            return redirect()->back()->with('unsuccess',$validator->getMessageBag()->toArray()['document'][0]);
        }
        $currency = Currency::where('id',$request->currency_id)->first();
        $amountToAdd = $request->amount/getRate($currency);
        $user = auth()->user();
        $subbank = SubInsBank::where('id', $request->bank)->first();
        $global_range = PlanDetail::where('plan_id', $user->bank_plan_id)->where('type', 'deposit')->first();
        $dailydeposit = DepositBank::where('user_id', $user->id)->whereDate('created_at', '=', date('Y-m-d'))->whereStatus('complete')->sum('amount');
        $monthlydeposit = DepositBank::where('user_id', $user->id)->whereMonth('created_at', '=', date('m'))->whereStatus('complete')->sum('amount');

        if ( $request->amount < $global_range->min ||  $request->amount > $global_range->max) {
           return redirect()->back()->with('unsuccess','Your amount is not in defined range. Max value is '.$global_range->max.' and Min value is '.$global_range->min );

        }

         if ($subbank->max_limit == 0) {
            if ( $request->amount < $subbank->min_limit ) {
                return redirect()->back()->with('unsuccess','Your amount is not in defined bank limit range.  Min value is '.$subbank->min_limit );

             }
        }
        else {

            if ( $request->amount < $subbank->min_limit ||  $request->amount > $subbank->max_limit) {
                return redirect()->back()->with('unsuccess','Your amount is not in defined bank limit range. Max value is '.$subbank->max_limit.' and Min value is '.$subbank->min_limit );

             }
        }


        if($dailydeposit > $global_range->daily_limit){
            return redirect()->back()->with('unsuccess','Daily deposit limit over.');
        }

        if($monthlydeposit > $global_range->monthly_limit){
            return redirect()->back()->with('unsuccess','Monthly deposit limit over.');
        }


        $customer_bank = BankAccount::whereUserId($user->id)->where('subbank_id',$request->bank)->where('currency_id', $request->currency_id)->first();
        $bankgateway = BankGateway::where('subbank_id', $request->bank)->first();
        $subbank_account = BankPoolAccount::where('bank_id', $request->bank)->where('currency_id', $request->currency_id)->first();
        if (!$subbank_account) {
            return redirect()->back()->with('unsuccess','Bank account for this currency does not exist');
        }
        $subbank = SubInsBank::where('id', $request->bank)->first();
        $subuser = Admin::where('id', $subbank->ins_id)->first();
        $client = New Client();
        try {
            $response = $client->request('GET','https://play.railsbank.com/v1/customer/ledgers?account_number='.$customer_bank->iban, [
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $enduser = json_decode($response->getBody())[0]->holder_id;
            $amount = json_decode($response->getBody())[0]->amount;
            $ledger = json_decode($response->getBody())[0]->ledger_id;
            if ($amount < $request->amount) {
                return redirect()->back()->with(array('warning' => 'Insufficient Balance.'));
            }
        } catch (\Throwable $th) {
            return redirect()->back()->with(array('warning' => 'Some Value is incorrect'));
        }


        try {

            $response = $client->request('POST','https://play.railsbank.com/v1/customer/beneficiaries', [
                'body' => '{
                    "holder_id": "'.$enduser.'",
                    "asset_class": "currency",
                    "asset_type": "eur",
                    "iban": "'.$subbank_account->iban.'",
                    "bic_swift": "'.$subbank_account->swift.'",
                    "person": {
                    "name": "'.$subuser->name.'",
                    "email": "'.$subuser->email.'",
                    "address": { "address_iso_country": "US" }
                    }
                }',
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);

            $beneficiary = json_decode($response->getBody())->beneficiary_id;
        } catch (\Throwable $th) {
            return redirect()->back()->with(array('warning' => 'Some Value is incorrect'));
        }
        try {
            $response = $client->request('POST', 'https://play.railsbank.com/v1/customer/transactions', [
                'body' => '{
                    "ledger_from_id": "'.$ledger.'",
                    "beneficiary_id": "'.$beneficiary.'",
                    "payment_type": "payment-type-EU-SEPA-Step2",
                    "amount": "'.$request->amount.'"
                  }',
                'headers' => [
                   'Accept'=> 'application/json',
                  'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                  'Content-Type' => 'application/json',
                ],
              ]);
            $transaction = json_decode($response->getBody())->transaction_id;
        } catch (\Throwable $th) {
            return redirect()->back()->with(array('warning' => 'Some Value is incorrect'));
        }



        $txnid = Str::random(4).time();
        $deposit = new DepositBank();

        if ($file = $request->file('document'))
        {
            $name = Str::random(8).time().'.'.$file->getClientOriginalExtension();
            $file->move('assets/doc',$name);
            $deposit['document'] = $name;
        }

        $deposit['deposit_number'] = Str::random(12);
        $deposit['user_id'] = auth()->id();
        $deposit['currency_id'] = $request->currency_id;
        $deposit['amount'] = $amountToAdd;
        $deposit['method'] = $request->method;
        $deposit['sub_bank_id'] = $request->bank;
        $deposit['txnid'] = $transaction;
        $deposit['details'] = $request->details;
        $deposit['status'] = "pending";
        $deposit->save();

        $gs =  Generalsetting::findOrFail(1);
        $user = auth()->user();
           $to = $user->email;
           $subject = " You have deposited successfully.";
           $msg = "Hello ".$user->name."!\nYou have invested successfully.\nThank you.";
           $headers = "From: ".$gs->from_name."<".$gs->from_email.">";
           mail($to,$subject,$msg,$headers);

        return redirect()->route('user.depositbank.create')->with('success','Deposit amount '.$request->amount.' ('.$currency->code.') successfully!');
    }

    public function master_store(Request $request){
        $client = New Client();
        $bankgateway = BankGateway::where('subbank_id', $request->subbank)->first();
        $subbank = SubInsBank::where('id', $request->subbank)->first();
        $admin = Admin::where('id', $subbank->ins_id)->first();
        $currency = Currency::whereId($request->currency)->first();
        // $bankaccount = BankAccount::where('user_id', $request->user)->where('subbank_id', $request->subbank)->where('currency_id', $request->currency)->first();
        if ($currency->code != 'EUR'){
            return redirect()->back()->with(array('warning' => 'Sorry, Currently this Railsbank api only supports for EUR because this api is not product version.'));
        }
        $bankaccount = BankPoolAccount::where('bank_id', $request->subbank)->where('currency_id', $request->currency)->first();
        if ($bankaccount){
            return redirect()->back()->with(array('warning' => 'This bank account already exists.'));

        }
        try {
            $response = $client->request('POST', 'https://play.railsbank.com/v1/customer/endusers', [
                'body' => '{
                    "person": {
                      "name": "'.$admin->name.'",
                      "email": "'.$admin->email.'",
                      "address": { "address_iso_country": "US" }
                    }
                }',
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $enduser = json_decode($response->getBody())->enduser_id;
        } catch (\Throwable $th) {
            //throw $th;
            return redirect()->back()->with(array('warning' => json_encode($th->getMessage())));
        }
        if ($enduser == null) {
            return redirect()->back()->with(array('warning' => 'Sorry, You can\'t create New Bank Account succesfully because Railsbank\'s enduser is not generated by RailsBank API. Please create again.'));
        }


        try {
            $response = $client->request('POST', 'https://play.railsbank.com/v1/customer/ledgers', [
                'body' => '{
                    "holder_id": "'.$enduser.'",
                    "partner_product": "ExampleBank-'.$currency->code.'-1",
                    "asset_class": "currency",
                    "asset_type": "'.strtolower($currency->code).'",
                    "ledger-type": "ledger-type-single-user",
                    "ledger-who-owns-assets": "ledger-assets-owned-by-me",
                    "ledger-primary-use-types": ["ledger-primary-use-types-payments"],
                    "ledger-t-and-cs-country-of-jurisdiction": "US"
                  }',
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $ledger = json_decode($response->getBody())->ledger_id;
        } catch (\Throwable $th) {
            return redirect()->back()->with(array('warning' => json_encode($th->getMessage())));
        }
        if ($ledger == null) {
            return redirect()->back()->with(array('warning' => 'Sorry, You can\'t create New Bank Account succesfully because Railsbank\'s ledger is not generated by RailsBank API. Please create again.'));
        }
        try {
            $response = $client->request('GET', 'https://play.railsbank.com/v1/customer/ledgers/'.$ledger.'/wait', [
                'headers' => [
                    'Accept'=> 'application/json',
                    'Authorization' => 'API-Key '.$bankgateway->information->API_Key,
                    'Content-Type' => 'application/json',
                ],
            ]);
            $bic_swift = json_decode($response->getBody())->bic_swift;
            $iban = json_decode($response->getBody())->iban;
        } catch (\Throwable $th) {
            //throw $th;
            return redirect()->back()->with(array('warning' => json_encode($th->getMessage())));
        }
        if ($iban == null || $bic_swift == null) {
            return redirect()->back()->with(array('warning' => 'Sorry, You can not create New Bank Account succesfully because RailsBank\'s iban or swift is not generated by OPENPAY API. Please try again.'));
        }
        $data = new BankPoolAccount();
        $data->bank_id = $request->subbank;
        $data->currency_id = $request->currency;
        $data->iban = $iban;
        $data->swift = $bic_swift;
        $data->save();
        return redirect()->back()->with(array('message' => 'Bank Account has been created successfully'));


    }

}
